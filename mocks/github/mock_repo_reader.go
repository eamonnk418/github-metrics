// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eamonnk418/github-metrics/internal/client (interfaces: RepoReader)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/github/mock_repo_reader.go -package=mock_github github.com/eamonnk418/github-metrics/internal/client RepoReader
//

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v59/github"
	gomock "go.uber.org/mock/gomock"
)

// MockRepoReader is a mock of RepoReader interface.
type MockRepoReader struct {
	ctrl     *gomock.Controller
	recorder *MockRepoReaderMockRecorder
}

// MockRepoReaderMockRecorder is the mock recorder for MockRepoReader.
type MockRepoReaderMockRecorder struct {
	mock *MockRepoReader
}

// NewMockRepoReader creates a new mock instance.
func NewMockRepoReader(ctrl *gomock.Controller) *MockRepoReader {
	mock := &MockRepoReader{ctrl: ctrl}
	mock.recorder = &MockRepoReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoReader) EXPECT() *MockRepoReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepoReader) Get(arg0 context.Context, arg1, arg2 string) (*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockRepoReaderMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepoReader)(nil).Get), arg0, arg1, arg2)
}
